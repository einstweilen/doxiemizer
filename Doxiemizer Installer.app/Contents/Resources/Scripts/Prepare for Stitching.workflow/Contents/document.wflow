<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>381</string>
	<key>AMApplicationVersion</key>
	<string>2.4</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>AppleScript ausführen</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on run {input, parameters}	set theFileList to input	set impfiles to count of theFileList	set impcount to 0 as integer -- number of files to import		-- EXIF data for Doxie Flip according to http://www.getdoxie.com/product/flip/samples.html		set dox_make to "Apparent"	set dox_model to "Doxie Flip"		-- convert these image formats to jpg before OCR	set bonus_ext to {"gif", "png", "tif", "tiff", "pict", "pic", "bmp"} as list		-- check if Domiemizer volume is mounted	try		set doxietest to ":Volumes:Doxiemizer" as alias	on error		set doxram to 256000		set ramdisk to "diskutil erasevolume HFS+ " &amp; quote &amp; "Doxiemizer" &amp; quote &amp; " `hdiutil attach -nomount ram://" &amp; doxram &amp; "`"		do shell script ramdisk	end try		-- create temp folders if necessary	set do_pre to "mkdir -p /Volumes/Doxiemizer/DCIM/DO_PRE"	do shell script do_pre		set do_tmp to "mkdir -p /Volumes/Doxiemizer/tmp"	do shell script do_tmp		repeat with theFile in theFileList		-- check file format		tell application "System Events" to set {theName, theExtension} to {name, name extension} of (contents of theFile)		if theExtension is not "" then set theName to text 1 thru -((count theExtension) + 2) of theName		if bonus_ext contains theExtension then			-- convert image to jpg 			try				set new_file to "/Volumes/Doxiemizer/tmp/" &amp; theName &amp; ".jpg"				tell application "Image Events"					launch					set this_image to open theFile					save this_image in new_file as JPEG without compression					close this_image					-- 					set theExtension to "jpg"					set theFile to (":Volumes:Doxiemizer:tmp:" &amp; theName &amp; "." &amp; theExtension) as alias				end tell							on error errStr number errorNumber				log ("P4S convert to jpeg " &amp; errorNumber &amp; " " &amp; errStr &amp; " " &amp; quoted form of POSIX path of (theFile))				display dialog "JPG conversion error" &amp; return &amp; theName &amp; "." &amp; theExtension with icon stop with title "Doxiemizer"				exit repeat -- exit script			end try		else if theExtension is "jpg" or theExtension is "jpeg" then			tell application "Finder" to move theFile to folder (":Volumes:Doxiemizer:tmp:" as alias) with replacing			set theFile to (":Volumes:Doxiemizer:tmp:" &amp; theName &amp; "." &amp; theExtension) as alias		end if				if theExtension is "jpg" or theExtension is "jpeg" then			set qtheFile to quoted form of POSIX path of (theFile)			try				tell application "Image Events"					launch										set this_image to open theFile					copy the dimensions of this_image to {w, h}										-- set to portrait mode					if w &gt; h then						rotate this_image to angle 90						set {w, h} to {h, w}					end if										-- choose best target size					if w ≥ 2400 and h ≥ 3600 then						set target_W to 2400						set target_H to 3600						set dox_dpiWidth to "600"						set dox_dpiHeight to "600"					else						set target_W to 1200						set target_H to 1800						set dox_dpiWidth to "300"						set dox_dpiHeight to "300"					end if										-- calculate scaling					-- beep -- debug feedback					if target_H &gt; target_W then						if h &gt; w then							set the scale_length to (h * target_W) / w							set the scale_length to ¬								round scale_length rounding as taught in school						else							set the scale_length to target_W						end if					else						set the scale_length to target_H					end if										scale this_image to size scale_length					pad this_image to dimensions {target_W, target_H} with pad color {0, 0, 0} --black padding 16 bit RGB					save this_image with icon					close this_image				end tell							on error errStr number errorNumber				log ("P4S Convert to JPG " &amp; errorNumber &amp; " " &amp; errStr &amp; " " &amp; quoted form of POSIX path of (theFile))			end try						-- set EXIF data			set dox_exif to ¬				"sips -s make " &amp; quote &amp; dox_make &amp; quote &amp; ¬				" -s model " &amp; quote &amp; dox_model &amp; quote &amp; ¬				" -s dpiWidth " &amp; dox_dpiWidth &amp; ¬				" -s dpiHeight " &amp; quote &amp; dox_dpiHeight &amp; quote &amp; ¬				" " &amp; qtheFile			do shell script dox_exif						set impcount to impcount + 1			set moveto to "mv " &amp; quoted form of POSIX path of (theFile) &amp; " '/Volumes/Doxiemizer/DCIM/DO_PRE/" &amp; impcount &amp; " " &amp; theName &amp; ".jpg'"			do shell script moveto								else			log ("P4S file skipped - wrong file form" &amp; quoted form of POSIX path of (theFile))		end if			end repeat		-- prepare import: rename the image folder	set do_rename to "mv /Volumes/Doxiemizer/DCIM/DO_PRE/ /Volumes/Doxiemizer/DCIM/100DOXIE/"	do shell script do_rename		log ("P4S prepared " &amp; impcount &amp; " of " &amp; impfiles &amp; " for stitching")		if hasdoxiefolder("Doxiemizer") then		-- start Doxie		tell application "Doxie" to activate	else		-- unmount RAM disk		try			do shell script "diskutil unmount Doxiemizer"			log ("P4S no files to prepare, unmount Doxiemizer RAM disk")		end try	end if	end runon log (logtext)	try		set p to (system attribute "HOME") &amp; "/Library/Logs/Doxiemizer.log"		set today to current date		set now to ((year of today) &amp; "-" &amp; ((month of today) as integer) &amp; "-" &amp; (day of today) &amp; " " &amp; time string of today &amp; "  ") as text		set fd to open for access p with write permission		write now &amp; logtext &amp; linefeed to fd as «class utf8» starting at eof		close access fd	on error		close access p	end tryend logon hasdoxiefolder(thedisk)	try		set doxietest to thedisk &amp; ":DCIM:100DOXIE" as alias -- check if folder exists		set doxietest to quoted form of (POSIX path of doxietest) as text		set i to (do shell script "ls -l " &amp; doxietest &amp; "*.[jJ][pP][gG] | wc -l") as integer -- are there any JPGs		if i = 0 then return (false)		return (true)	on error		return (false)	end tryend hasdoxiefolder</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>D14C6325-ACB9-48B5-83B1-C34F32EB360E</string>
				<key>Keywords</key>
				<array>
					<string>Ausführen</string>
				</array>
				<key>OutputUUID</key>
				<string>481C8EC3-8B61-40B4-8DA4-5EC3F7446242</string>
				<key>UUID</key>
				<string>D4CEF89A-6832-4425-85D8-B2D1F350D238</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>250.500000:333.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/German.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>serviceApplicationBundleID</key>
		<string>com.apple.finder</string>
		<key>serviceApplicationPath</key>
		<string>/System/Library/CoreServices/Finder.app</string>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.fileSystemObject.image</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
